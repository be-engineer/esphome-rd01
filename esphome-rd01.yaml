substitutions:
  devicename: rd01
  upper_devicename: "Ai-Think RD-01"

esphome:
  name: ${devicename}
  comment: ${upper_devicename}
  includes:
    - components/rd01_uart.h

esp8266:
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#  reboot_timeout: 0s
  ap:
    password: "admin1234"
    ap_timeout: 30s

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:

ota:

uart:
  id: uart_rd01
  tx_pin: TX
  rx_pin: RX
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

custom_component:
  - lambda: |-
      return {new RD01(id(uart_rd01))};
    components:
      - id: rd01

binary_sensor:
  - platform: custom
    lambda: |-
      auto uart_component = static_cast<RD01 *>(rd01);
      return {uart_component->hasTarget,uart_component->hasMovingTarget,uart_component->hasStillTarget,uart_component->lastCommandSuccess};
    binary_sensors:
      - name: "Has Target"
      - name: "Has Moving Target"
      - name: "Has Still Target"
      - name: "Last Command Success"

sensor:
  - platform: custom
    lambda: |-
      auto uart_component = static_cast<RD01 *>(rd01);
      return {uart_component->movingTargetDistance,uart_component->movingTargetEnergy,uart_component->stillTargetDistance,uart_component->stillTargetEnergy,uart_component->detectDistance};
    sensors:
      - name: "Moving Target Distance"
        unit_of_measurement: "cm"
        accuracy_decimals: 1
      - name: "Moving Target Energy"
        unit_of_measurement: "%"
        accuracy_decimals: 0
      - name: "Still Target Distance"
        unit_of_measurement: "cm"
        accuracy_decimals: 1
      - name: "Still Target Energy"
        unit_of_measurement: "%"
        accuracy_decimals: 0
      - name: "Detect Distance"
        unit_of_measurement: "cm"
        accuracy_decimals: 1

number:
  - platform: template
    name: "Max Moving Distance Range"
    id: maxMovingDistanceRange
    min_value: 2
    max_value: 8
    step: 1
    update_interval: never
    optimistic: true
    set_action:
      - lambda: |-
          auto uart_component = static_cast<RD01 *>(rd01);
          uart_component->setMaxDistancesAndNoneDuration(x,id(maxStillDistanceRange).state,id(noneDuration).state);
  - platform: template
    name: "Max Still Distance Range"
    id: maxStillDistanceRange
    min_value: 2
    max_value: 8
    step: 1
    update_interval: never
    optimistic: true
    set_action:
      - lambda: |-
          auto uart_component = static_cast<RD01 *>(rd01);
          uart_component->setMaxDistancesAndNoneDuration(id(maxMovingDistanceRange).state,x,id(noneDuration).state);
  - platform: template
    name: "None Duration"
    id: noneDuration
    min_value: 0
    max_value: 65535
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    set_action:
      - lambda: |-
          auto uart_component = static_cast<RD01 *>(rd01);
          uart_component->setMaxDistancesAndNoneDuration(id(maxMovingDistanceRange).state,id(maxStillDistanceRange).state,x);
  - platform: template
    name: "Max Moving Distance Range"
    id: DistanceRange1
    min_value: 0
    max_value: 65535
    step: 1
    update_interval: never
    optimistic: true
    set_action:
      - lambda: |-
          auto uart_component = static_cast<RD01 *>(rd01);
          uart_component->setDistancesAndStillSensitive(x, id(DistanceRange2).state, id(StillSensitive).state);
  - platform: template
    name: "Max Still Distance Range"
    id: DistanceRange2
    min_value: 0
    max_value: 65535
    step: 1
    update_interval: never
    optimistic: true
    set_action:
      - lambda: |-
          auto uart_component = static_cast<RD01 *>(rd01);
          uart_component->setDistancesAndStillSensitive(id(DistanceRange1).state, x, id(StillSensitive).state);
  - platform: template
    name: "Still Sensitive"
    id: StillSensitive
    min_value: 0
    max_value: 65535
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    set_action:
      - lambda: |-
          auto uart_component = static_cast<RD01 *>(rd01);
          uart_component->setDistancesAndStillSensitive(id(DistanceRange1).state, id(DistanceRange2).state, x);

button:
  - platform: template
    name: "Turn on Engineer mode"
    on_press:
      - lambda: 'static_cast<RD01 *>(rd01)->setEngineeringMode(true);'
  - platform: template
    name: "Turn off Engineer mode"
    on_press:
      - lambda: 'static_cast<RD01 *>(rd01)->setEngineeringMode(false);'
  - platform: template
    name: "Turn on config mode"
    on_press:
      - lambda: 'static_cast<RD01 *>(rd01)->setConfigMode(true);'
  - platform: template
    name: "Turn off config mode"
    on_press:
      - lambda: 'static_cast<RD01 *>(rd01)->setConfigMode(false);'
  - platform: template
    name: "Get config"
    on_press:
      - lambda: 'static_cast<RD01 *>(rd01)->queryParameters();'
